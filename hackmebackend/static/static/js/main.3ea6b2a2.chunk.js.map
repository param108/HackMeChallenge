{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","payload","username","state","password","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","console","log","json","data","alert","preventDefault","length","localeCompare","test","react_default","a","createElement","className","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","Component","App","Login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAKqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,aAAe,SAAAC,GACbR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACGO,EAAMG,OAAOC,GAAKJ,EAAMG,OAAOE,SAlBjBb,EAsBnBc,aAAe,SAAAN,GACT,IAAMO,EAAU,CACZC,SAAUhB,EAAKiB,MAAMD,SACrBE,SAAUlB,EAAKiB,MAAMC,UAE3BC,MAAM,UAAW,CACbC,OAAQ,OACRC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUX,KACtBY,KAAM,SAASC,GAAmC,OAAvBC,QAAQC,IAAIF,GAAkBA,EAASG,SAChEJ,KAAK,SAASK,GAAQC,MAAMR,KAAKC,UAAUM,MAEhDxB,EAAM0B,kBAlCRlC,EAAKiB,MAAQ,CACXD,SAAU,GACVE,SAAU,IALKlB,8EAWjB,OAAOG,KAAKc,MAAMD,SAASmB,OAAS,GAAKhC,KAAKc,MAAMC,SAASiB,OAAS,GACV,IAAnDhC,KAAKc,MAAMD,SAASoB,cAAc,cAFvB,WAGAC,KAAKlC,KAAKc,MAAMC,2CA8BpC,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUvC,KAAKW,cACnBwB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACrCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,iBACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,WACLpC,MAAOV,KAAKc,MAAMD,SAClBkC,SAAU/C,KAAKI,gBAGnB+B,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACrCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,iBACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACElC,MAAOV,KAAKc,MAAMC,SAClBgC,SAAU/C,KAAKI,aACf0C,KAAK,cAGTX,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,OAAK,EACLP,OAAO,QACPQ,UAAWlD,KAAKmD,eAChBL,KAAK,UAJP,kBAhEyBM,cCcpBC,0LAbX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,2BAIJF,EAAAC,EAAAC,cAACiB,EAAD,cATUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.3ea6b2a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\n\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n\n  validateForm() {\n    var passwordRegex = /^\\d\\d\\d$/;\n    return this.state.username.length > 0 && this.state.password.length > 0\n          && this.state.username.localeCompare(\"bhulakkad\") === 0 &&\n          passwordRegex.test(this.state.password);\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n        const payload = {\n            username: this.state.username,\n            password: this.state.password\n        };\n      fetch('/login/', {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n      }).then( function(response) { console.log(response); return response.json();})\n          .then(function(data) { alert(JSON.stringify(data));});\n\n      event.preventDefault();\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <form onSubmit={this.handleSubmit}>\n          <FormGroup controlId=\"username\" bsSize=\"large\">\n            <ControlLabel>Username</ControlLabel>\n            <FormControl\n              autoFocus\n              type=\"username\"\n              value={this.state.username}\n              onChange={this.handleChange}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bsSize=\"large\">\n            <ControlLabel>Password</ControlLabel>\n            <FormControl\n              value={this.state.password}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n          </FormGroup>\n          <Button\n            block\n            bsSize=\"large\"\n            disabled={!this.validateForm()}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Login from './Login.js';\nimport './Login.css';\nimport './App.css';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <p>\n            HACKME PLEASE\n            </p>\n        </header>\n        <Login/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}